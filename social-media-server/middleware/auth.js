import jwt from 'jsonwebtoken'
import User from "../models/user"
// If i want to like a post then response come to auth and if the user valid then its like otherwise not like 
// so thats why we will use that allows to perform next operation

const auth = async (req, res, next) => {
    let token;
    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
        try {
            token = req.headers.authorization.split(" ")[1]
            // if the token length is less then 500 then its our own token otherwise its google token
            const isCustomAuth = token.length < 500

            let decodedData = jwt.verify(token, process.env.JWT_SECRET)
            // if (token && isCustomAuth) {
            //     req.userId = decodedData?.id
            // }
            // else {
            //     decodedData = jwt.decode(token)
            //     // sub is id that will generated by google for each account
            //     req.userId = decodedData?.sub
            // }

            // in the future user delete account and still login in another device (prevent this)
            const this_user = await User.findById(decodedData?.id)
            if (!this_user) {
                return res.status(404).json({ status: 'error', message: "User doesn't exist" })
            }

            // check if the user change password after token generated then its prevent to access with the previous token
            if (this_user.changedPasswordAfter(decode.iat)) {
                return res.sts(400).json({ status: 'error', message: 'User changed password recently please login again' })
            }

            req.user = this_user;

            next();
        } catch (error) {
            return res.status(500).json({ message: error.message })
        }
    }
    else if (req.cookies.jwt) {
        token = req.cookies.jwt
    }
    else {
        return res.status(300).json({ message: 'Invalid headers' })
    }

}

export default auth;